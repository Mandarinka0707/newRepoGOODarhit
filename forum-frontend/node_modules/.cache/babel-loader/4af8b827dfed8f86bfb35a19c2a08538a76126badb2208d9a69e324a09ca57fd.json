{"ast":null,"code":"var _jsxFileName = \"/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/components/Posts/PostList.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport '../MainLayout.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PostList = ({\n  refreshTrigger\n}) => {\n  _s();\n  const [posts, setPosts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchPosts = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        const token = localStorage.getItem('token');\n        if (!token) {\n          throw new Error('Authentication required');\n        }\n        const response = await axios.get('http://localhost:8081/posts', {\n          headers: {\n            'Authorization': `Bearer ${token}`,\n            'Accept': 'application/json'\n          }\n        });\n        if (!response.data || !Array.isArray(response.data)) {\n          throw new Error('Invalid data format received from server');\n        }\n\n        // Filter out posts without IDs and log them\n        const validPosts = response.data.filter(post => {\n          if (!post.id) {\n            console.warn('Post missing ID:', post);\n            return false;\n          }\n          return true;\n        });\n        setPosts(validPosts);\n      } catch (err) {\n        var _err$response, _err$response$data;\n        console.error('Error fetching posts:', err);\n        setError(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || err.message || 'Failed to load posts. Please try again later.');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchPosts();\n  }, [refreshTrigger]); // Добавляем refreshTrigger в зависимости\n\n  const renderPostItem = post => {\n    if (!post.id) return null;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post-item\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: post.title || 'Untitled Post'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: post.content || 'No content available'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post-meta\",\n        children: [/*#__PURE__*/_jsxDEV(\"small\", {\n          children: [\"Author: \", post.author_id || 'Unknown']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }, this), post.created_at && /*#__PURE__*/_jsxDEV(\"small\", {\n          children: [\" | Posted: \", new Date(post.created_at).toLocaleString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this)]\n    }, `post-${post.id}`, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this);\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post-list-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading posts...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post-list-container error\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Error: \", error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => window.location.reload(),\n        className: \"retry-button\",\n        children: \"Retry\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"post-list-container\",\n    children: posts.length > 0 ? [...posts].reverse().map(renderPostItem) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"no-posts\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No posts available yet.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Be the first to create one!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 9\n  }, this);\n};\n_s(PostList, \"FFSFm1bVdM1s2gLh8ffGbsIvlRY=\");\n_c = PostList;\nexport default PostList;\nvar _c;\n$RefreshReg$(_c, \"PostList\");","map":{"version":3,"names":["React","useEffect","useState","axios","jsxDEV","_jsxDEV","PostList","refreshTrigger","_s","posts","setPosts","loading","setLoading","error","setError","fetchPosts","token","localStorage","getItem","Error","response","get","headers","data","Array","isArray","validPosts","filter","post","id","console","warn","err","_err$response","_err$response$data","message","renderPostItem","className","children","title","fileName","_jsxFileName","lineNumber","columnNumber","content","author_id","created_at","Date","toLocaleString","onClick","window","location","reload","length","reverse","map","_c","$RefreshReg$"],"sources":["/Users/darinautalieva/Desktop/GOProject/forum-frontend/src/components/Posts/PostList.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport '../MainLayout.css';\n\nconst PostList = ({ refreshTrigger }) => {\n    const [posts, setPosts] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n        const fetchPosts = async () => {\n            try {\n                setLoading(true);\n                setError(null);\n                \n                const token = localStorage.getItem('token');\n                if (!token) {\n                    throw new Error('Authentication required');\n                }\n\n                const response = await axios.get('http://localhost:8081/posts', {\n                    headers: {\n                        'Authorization': `Bearer ${token}`,\n                        'Accept': 'application/json'\n                    }\n                });\n\n                if (!response.data || !Array.isArray(response.data)) {\n                    throw new Error('Invalid data format received from server');\n                }\n\n                // Filter out posts without IDs and log them\n                const validPosts = response.data.filter(post => {\n                    if (!post.id) {\n                        console.warn('Post missing ID:', post);\n                        return false;\n                    }\n                    return true;\n                });\n\n                setPosts(validPosts);\n            } catch (err) {\n                console.error('Error fetching posts:', err);\n                setError(err.response?.data?.message || \n                        err.message || \n                        'Failed to load posts. Please try again later.');\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        fetchPosts();\n    }, [refreshTrigger]); // Добавляем refreshTrigger в зависимости\n\n    const renderPostItem = (post) => {\n        if (!post.id) return null;\n        \n        return (\n            <div key={`post-${post.id}`} className=\"post-item\">\n                <h3>{post.title || 'Untitled Post'}</h3>\n                <p>{post.content || 'No content available'}</p>\n                <div className=\"post-meta\">\n                    <small>Author: {post.author_id || 'Unknown'}</small>\n                    {post.created_at && (\n                        <small> | Posted: {new Date(post.created_at).toLocaleString()}</small>\n                    )}\n                </div>\n            </div>\n        );\n    };\n\n    if (loading) {\n        return (\n            <div className=\"post-list-container\">\n                <div className=\"loading-spinner\"></div>\n                <p>Loading posts...</p>\n            </div>\n        );\n    }\n\n    if (error) {\n        return (\n            <div className=\"post-list-container error\">\n                <p>Error: {error}</p>\n                <button \n                    onClick={() => window.location.reload()} \n                    className=\"retry-button\"\n                >\n                    Retry\n                </button>\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"post-list-container\">\n            {posts.length > 0 ? (\n                [...posts].reverse().map(renderPostItem)\n            ) : (\n                <div className=\"no-posts\">\n                    <p>No posts available yet.</p>\n                    <p>Be the first to create one!</p>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default PostList;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}